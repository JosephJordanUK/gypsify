name: Publish tracking artifacts to tracker/dev

on:
  push:
    branches: [dev]
    paths-ignore:
      - 'prompt/latest-sha.txt'
      - 'prompt/manifest.json'
      - 'prompt/changed-in-latest.json'
      - 'prompt/latest-bundle.json'
      - 'prompt/snapshots/**'
      - '.github/workflows/**'
  pull_request:
    branches: [dev]

concurrency:
  group: tracker-dev
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source (dev)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Resolve SHAs from event
        id: shas
        run: |
          echo "NEW_SHA=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "OLD_SHA=${{ github.event.before }}" >> $GITHUB_OUTPUT
          echo "New: ${{ github.sha }}"
          echo "Old: ${{ github.event.before }}"

      - name: Fetch tracker branch
        run: |
          git fetch origin tracker/dev || true

      - name: Prepare tracker workspace (switch to tracker/dev)
        run: |
          if git show-ref --verify --quiet refs/remotes/origin/tracker/dev; then
            git checkout -B tracker/dev origin/tracker/dev
          else
            git checkout --orphan tracker/dev
            rm -rf .
            mkdir -p prompt
            git add prompt
            git -c "user.name=github-actions[bot]" -c "user.email=41898282+github-actions[bot]@users.noreply.github.com" commit -m "chore(tracker): init branch"
          fi
          # Clean everything except .git and prompt/
          find . -mindepth 1 -maxdepth 1 ! -name ".git" ! -name "prompt" -exec rm -rf {} +
          mkdir -p prompt

      - name: Copy dependency snapshots from dev
        run: |
          mkdir -p prompt/deps
          git show origin/dev:package.json > prompt/deps/package.json
          git show origin/dev:yarn.lock > prompt/deps/yarn.lock || true

      - name: Build manifest.json from dev tree
        run: |
          jq -n '[]' > prompt/manifest.json
          git ls-files --with-tree=origin/dev \
            | grep -Ev '^(node_modules/|ios/|android/|tests/|docs/|\.git/|\.github/workflows/|prompt/)' \
            | while read -r f; do
                BYTES=$(git cat-file -s "origin/dev:$f" || echo 0)
                if [ "$BYTES" != "0" ]; then
                  SHA256=$(git show "origin/dev:$f" | sha256sum | cut -d" " -f1)
                  jq --arg path "$f" --argjson bytes "$BYTES" --arg sha "$SHA256" \
                     '. + [{"path":$path,"bytes":$bytes,"sha256":$sha}]' \
                     prompt/manifest.json > prompt/manifest.tmp && mv prompt/manifest.tmp prompt/manifest.json
                fi
              done

      - name: Build changed-in-latest.json (OLD->NEW on dev, skip assets)
        run: |
          git diff --name-only ${{ steps.shas.outputs.OLD_SHA }} ${{ steps.shas.outputs.NEW_SHA }} \
            | grep -Ev '^(node_modules/|ios/|android/|tests/|docs/|\.git/|\.github/workflows/|prompt/|assets/)' \
            | jq -R -s 'split("\n") | map(select(length>0))' > prompt/changed-in-latest.json
          echo "Changed filtered:"
          cat prompt/changed-in-latest.json

      - name: Write latest-sha.txt
        run: |
          echo "${{ steps.shas.outputs.NEW_SHA }}" > prompt/latest-sha.txt

      - name: Write snapshots of changed files from dev
        run: |
          set -e
          SHA="${{ steps.shas.outputs.NEW_SHA }}"
          mkdir -p "prompt/snapshots/${SHA}"
          CHANGED=$(jq -r '.[]' prompt/changed-in-latest.json)
          for f in $CHANGED; do
            mkdir -p "prompt/snapshots/${SHA}/$(dirname "$f")"
            git show "${SHA}:${f}" > "prompt/snapshots/${SHA}/${f}" || true
          done

      - name: Write per-file JSONs for ALL files (rebuild bundle) and index
      # NEW: per-file JSONs + index (keeps legacy bundle for now)
      - name: Write per-file JSONs (bundle/by-path) and index
        run: |
          set -e
          SHA="${{ steps.shas.outputs.NEW_SHA }}"
          mkdir -p bundle/by-path
          INDEX="bundle/index.json"
          echo '{"sha":"'"$SHA"'","files":[]}' > "$INDEX"

          b64() { printf '%s' "$1" | base64 -w0; }

          CHANGED=$(jq -r '.[]' prompt/changed-in-latest.json)
          for f in $CHANGED; do
            if git show "$SHA:$f" >/dev/null 2>&1; then
              if echo "$f" | grep -Eiq '(\.env|\.pem|\.p12|\.der|\.jks|\.keystore|\.apk|\.aab|\.zip|\.ttf|\.otf|\.png|\.jpg|\.gif|\.webp)$'; then
                continue
              fi
              size=$(git cat-file -s "$SHA:$f" || echo 0)
              if [ "$size" -gt $((1024*1024)) ]; then
                continue
              fi

              CONTENT_B64=$(git show "$SHA:$f" | base64 -w0)
              OUT="bundle/by-path/$(b64 "$f").json"
              printf '{"path":"%s","encoding":"base64","content":"%s"}' "$f" "$CONTENT_B64" > "$OUT"

              tmp=$(mktemp)
              jq --arg path "$f" --arg href "bundle/by-path/$(b64 "$f").json" \
                 '.files += [{"path":$path,"href":$href}]' "$INDEX" > "$tmp" && mv "$tmp" "$INDEX"
            fi
          done

      - name: Write latest-bundle.json (paths + base64 contents)
        run: |
          set -e
          SHA="${{ steps.shas.outputs.NEW_SHA }}"
          MANIFEST="prompt/manifest.json"
          ROOT_DIR="bundle/by-path"
          INDEX="bundle/index.json"

          mkdir -p "$ROOT_DIR"
          # Clean old payloads to reflect deletions
          find "$ROOT_DIR" -type f -name '*.json' -print -delete || true

          echo '{"sha":"'"$SHA"'","files":[]}' > "$INDEX"

          b64() { printf '%s' "$1" | base64 -w0; }

          jq -r '.[].path' "$MANIFEST" | while read -r f; do
            # skip secrets/binaries and >1MB
            if echo "$f" | grep -Eiq '(\.env|\.pem|\.p12|\.der|\.jks|\.keystore|\.apk|\.aab|\.zip|\.ttf|\.otf|\.png|\.jpg|\.gif|\.webp)$'; then
              continue
            fi
            if ! git show "origin/dev:$f" >/dev/null 2>&1; then
              continue
            fi
            size=$(git cat-file -s "origin/dev:$f" || echo 0)
            if [ "$size" -gt $((1024*1024)) ]; then
              continue
            fi

            CONTENT_B64=$(git show "origin/dev:$f" | base64 -w0)
            OUT="$ROOT_DIR/$(b64 "$f").json"
            printf '{"path":"%s","encoding":"base64","content":"%s"}' "$f" "$CONTENT_B64" > "$OUT"

            tmp=$(mktemp)
            jq --arg path "$f" --arg href "bundle/by-path/$(b64 "$f").json" \
               '.files += [{"path":$path,"href":$href}]' "$INDEX" > "$tmp" && mv "$tmp" "$INDEX"
          done

      - name: Remove legacy latest-bundle.json if present
        run: |
          git rm -f prompt/latest-bundle.json || true

      - name: Configure SSH for deploy key
        env:
          DEPLOY_KEY: ${{ secrets.TRACKER_DEPLOY_KEY }}
        run: |
          install -d -m 700 ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config user.name "tracker-bot"
          git config user.email "tracker-bot@users.noreply.github.com"

      - name: Commit and push artifacts to tracker/dev
        run: |
          git add prompt/latest-sha.txt prompt/manifest.json prompt/changed-in-latest.json bundle prompt/snapshots prompt/deps
          git add prompt/latest-sha.txt prompt/manifest.json prompt/changed-in-latest.json bundle prompt/snapshots prompt/deps prompt/latest-bundle.json
          if ! git diff --cached --quiet; then
            git commit -m "chore(tracker): publish per-file artifacts for ${{ steps.shas.outputs.NEW_SHA }} [skip ci]"
            git push git@github.com:${{ github.repository }}.git HEAD:tracker/dev
          else
            echo "No changes to publish."
          fi
