name: Publish tracking artifacts to tracker/dev

on:
  push:
    branches: [dev]
    paths-ignore:
      - 'prompt/latest-sha.txt'
      - 'prompt/manifest.json'
      - 'prompt/changed-in-latest.json'
      - 'prompt/latest-bundle.json'
      - 'prompt/snapshots/**'
      - '.github/workflows/**'
  workflow_dispatch:

concurrency:
  group: tracker-dev
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Resolve SHAs from event
        id: shas
        run: |
          echo "NEW_SHA=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "OLD_SHA=${{ github.event.before }}" >> $GITHUB_OUTPUT
          echo "New: ${{ github.sha }}"
          echo "Old: ${{ github.event.before }}"

      - name: Checkout tracker/dev
        run: |
          git fetch origin tracker/dev || true
          if git show-ref --verify --quiet refs/remotes/origin/tracker/dev; then
            git checkout -B tracker/dev origin/tracker/dev
          else
            git checkout --orphan tracker/dev
            rm -rf .
            mkdir -p prompt
            git add prompt
            git -c "user.name=github-actions[bot]" -c "user.email=41898282+github-actions[bot]@users.noreply.github.com" commit -m "chore(tracker): init branch"
          fi

      - name: Reset workspace for prompt only
        run: |
          find . -mindepth 1 -maxdepth 1 ! -name ".git" ! -name "prompt" -exec rm -rf {} +
          mkdir -p prompt

      - name: Copy dependency snapshots
        run: |
          mkdir -p prompt/deps
          git show origin/dev:package.json > prompt/deps/package.json
          git show origin/dev:yarn.lock > prompt/deps/yarn.lock || true

      - name: Build manifest.json (from dev tree)
        run: |
          jq -n '[]' > prompt/manifest.json
          git ls-files --with-tree=origin/dev \
            | grep -Ev '^(node_modules/|ios/|android/|tests/|docs/|\.git/|\.github/workflows/|prompt/)' \
            | while read -r f; do
                BYTES=$(git cat-file -s "origin/dev:$f" || echo 0)
                if [ "$BYTES" != "0" ]; then
                  SHA256=$(git show "origin/dev:$f" | sha256sum | cut -d" " -f1)
                  jq --arg path "$f" --argjson bytes "$BYTES" --arg sha "$SHA256" \
                     '. + [{"path":$path,"bytes":$bytes,"sha256":$sha}]' \
                     prompt/manifest.json > prompt/manifest.tmp && mv prompt/manifest.tmp prompt/manifest.json
                fi
              done

      # ===== FULL SNAPSHOT MODE =====

      - name: Build full file list (src + prompt + root allowlist)
        run: |
          set -e
          # 1) src + prompt (exclude tests/docs anywhere, .gitkeep, and tracker artifacts)
          git ls-tree -r --name-only origin/dev -- src prompt \
            | grep -Eiv '(^|/)(tests|docs)(/|$)' \
            | grep -Ev '\.gitkeep$' \
            | grep -Ev '^prompt/(changed-in-latest\.json|latest-sha\.txt|manifest\.json|file-list\.txt|latest-bundle\.json|snapshots/)' \
            > prompt/file-list.txt

          # 2) root allowlist
          git ls-tree --name-only origin/dev -- . \
            | grep -E '(\.editorconfig|\.nvmrc|\.prettierignore|\.prettierrc\.json|app\.json|App\.tsx|index\.ts|babel\.config\.(js|cjs|mjs|ts)|eslint\.config\.cjs|metro\.config\.(js|cjs|mjs|ts)|package\.json|tsconfig\.json|README\.md|LICENSE|firebase\.json|firestore\.indexes\.json|\.firebaserc)$' \
            >> prompt/file-list.txt

          # 3) global excludes
          sed -i '/^\.env$/d' prompt/file-list.txt
          sed -i '/^yarn\.lock$/d' prompt/file-list.txt
          sed -i '/^\.github\//d' prompt/file-list.txt

          # 4) de-dup and clean
          sort -u prompt/file-list.txt -o prompt/file-list.txt
          sed -i '/^$/d' prompt/file-list.txt

      - name: Build changed-in-latest.json (full snapshot mode)
        run: |
          jq -R -s 'split("\n") | map(select(length>0))' prompt/file-list.txt \
            > prompt/changed-in-latest.json

      - name: Enforce tracker caps and exclusions (full list)
        run: |
          set -e
          MAX=$((1024*1024)) # 1 MB
          BAD='(\.env|\.pem|\.p12|\.der|\.jks|\.keystore|\.apk|\.aab|\.zip|\.ttf|\.otf|\.png|\.jpg|\.gif|\.webp)$'
          fail=0
          while IFS= read -r f; do
            if echo "$f" | grep -Eiq '^(\.git/|node_modules/|ios/|android/|\.github/workflows/)' ; then
              echo "FORBIDDEN PATH: $f" && fail=1
              continue
            fi
            if echo "$f" | grep -Eiq "$BAD"; then
              echo "FORBIDDEN EXT: $f" && fail=1
              continue
            fi
            size=$(git cat-file -s "origin/dev:$f" 2>/dev/null || echo 0)
            if [ "$size" -gt "$MAX" ]; then
              echo "TOO LARGE: $f (${size} bytes)" && fail=1
            fi
          done < prompt/file-list.txt
          [ $fail -eq 0 ] || { echo "Tracker policy violation"; exit 1; }

      - name: Write latest-sha.txt
        run: |
          echo "${{ steps.shas.outputs.NEW_SHA }}" > prompt/latest-sha.txt

      - name: Write snapshots of FULL set from dev
        run: |
          set -e
          SHA="${{ steps.shas.outputs.NEW_SHA }}"
          mkdir -p "prompt/snapshots/${SHA}"
          while IFS= read -r f; do
            mkdir -p "prompt/snapshots/${SHA}/$(dirname "$f")"
            git show "origin/dev:$f" > "prompt/snapshots/${SHA}/${f}" || true
          done < prompt/file-list.txt

      - name: Write latest-bundle.json (FULL snapshot)
        run: |
          set -e
          SHA="${{ steps.shas.outputs.NEW_SHA }}"
          echo "{\"sha\":\"$SHA\",\"files\":[]}" > prompt/latest-bundle.json
          while IFS= read -r f; do
            if git show "origin/dev:$f" >/dev/null 2>&1; then
              CONTENT_B64=$(git show "origin/dev:$f" | base64 -w0)
              tmp=$(mktemp)
              jq --arg p "$f" --arg c "$CONTENT_B64" \
                '.files += [{"path":$p,"base64":$c}]' \
                prompt/latest-bundle.json > "$tmp"
              mv "$tmp" prompt/latest-bundle.json
            fi
          done < prompt/file-list.txt

      - name: Verify bundle matches file list
        run: |
          LIST_COUNT=$(wc -l < prompt/file-list.txt | tr -d ' ')
          BUNDLE_COUNT=$(jq '.files | length' prompt/latest-bundle.json)
          if [ "$LIST_COUNT" != "$BUNDLE_COUNT" ]; then
            echo "Mismatch: list=$LIST_COUNT bundle=$BUNDLE_COUNT"
            echo "First 20 from list:" && head -20 prompt/file-list.txt
            echo "Bundle sample:" && jq '.files[:5] | map(.path)' prompt/latest-bundle.json
            exit 1
          fi

      # ===== END FULL SNAPSHOT MODE =====

      - name: Configure SSH for deploy key
        env:
          DEPLOY_KEY: ${{ secrets.TRACKER_DEPLOY_KEY }}
        run: |
          install -d -m 700 ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config user.name "tracker-bot"
          git config user.email "tracker-bot@users.noreply.github.com"

      - name: Commit and push artifacts to tracker/dev
        run: |
          git add prompt/latest-sha.txt prompt/manifest.json prompt/changed-in-latest.json prompt/latest-bundle.json prompt/snapshots prompt/deps
          if ! git diff --cached --quiet; then
            git commit -m "chore(tracker): publish FULL snapshot for ${{ steps.shas.outputs.NEW_SHA }} [skip ci]"
            git push git@github.com:${{ github.repository }}.git HEAD:tracker/dev
          else
            echo "No changes to publish."
          fi
